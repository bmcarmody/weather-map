{"version":3,"sources":["store/AppContext.js","store/reducers/AppReducer.js","store/actions/AppActions.js","components/atoms/Map.js","components/atoms/GeocoderSearch.js","components/atoms/DailyWeather.js","components/molecules/Sidebar.js","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","_ref","reducer","initialState","children","react_default","a","createElement","Provider","value","useReducer","useAppValue","useContext","AppReducer","state","action","type","map","Object","objectSpread","position","location","weather","DARK_SKY_API_KEY","concat","process","MAPBOX_API_KEY","MapboxMap","ReactMapboxGl","accessToken","Map","_useAppValue","_useAppValue2","slicedToArray","store","dispatch","_useState","useState","_useState2","tempMap","setTempMap","useEffect","className","style","ref","undefined","lib_esm","coordinates","anchor","GeocoderSearch","react_geocoder_autocomplete","onSelect","center","place_name","flyTo","movePosition","axios","get","then","res","data","daily","getWeather","types","DailyWeather","props","day","weatherInfo","dotw","moment","unix","time","utc","format","formattedIconString","icon","toUpperCase","replace","index","react_skycons_default","color","summary","Math","round","temperatureLow","temperatureHigh","Sidebar","atoms_GeocoderSearch","Fragment","atoms_DailyWeather","key","Date","getFullYear","href","alt","target","rel","Home","atoms_Map","molecules_Sidebar","App","AppContext_AppProvider","pages_Home","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5dc74048.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\n\nexport const AppContext = createContext({});\n\nexport const AppProvider = ({ reducer, initialState, children }) => (\n  <AppContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </AppContext.Provider>\n);\n\nexport const useAppValue = () => useContext(AppContext);\n","const AppReducer = (state, action) => {\n  switch (action.type) {\n    case 'setMap':\n      return {\n        map: action.map\n      };\n    case 'setPosition':\n      return {\n        ...state,\n        position: action.position\n      };\n    case 'setLocation':\n      return {\n        ...state,\n        location: action.location\n      };\n    case 'setWeather':\n      return {\n        ...state,\n        weather: action.weather\n      };\n    default:\n      return { state };\n  }\n};\n\nexport default AppReducer;\n","import axios from 'axios';\n\nconst DARK_SKY_API_KEY = `${process.env.REACT_APP_DARK_SKY_API_KEY}`;\n\nexport const getWeather = center => dispatch => {\n  axios\n    .get(\n      `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${DARK_SKY_API_KEY}/${\n        center[1]\n      },${center[0]}`\n    )\n    .then(res =>\n      dispatch({\n        type: 'setWeather',\n        weather: res.data.daily.data\n      })\n    );\n};\n\nexport const movePosition = (store, center, location) => dispatch => {\n  store.map.state.map.flyTo({ center });\n  dispatch({\n    type: 'setPosition',\n    position: center\n  });\n  dispatch({\n    type: 'setLocation',\n    location\n  });\n};\n\nexport const setMap = map => dispatch => {\n  dispatch({\n    type: 'setMap',\n    map\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport ReactMapboxGl, { Marker } from 'react-mapbox-gl';\n\nimport { useAppValue } from '../../store/AppContext';\nimport { setMap } from '../../store/actions/AppActions';\n\nconst MAPBOX_API_KEY = `${process.env.REACT_APP_MAPBOX_API_KEY}`;\nconst MapboxMap = ReactMapboxGl({\n  accessToken: MAPBOX_API_KEY\n});\n\nconst Map = () => {\n  const [store, dispatch] = useAppValue();\n  const [tempMap, setTempMap] = useState(0);\n\n  useEffect(() => {\n    setMap(tempMap)(dispatch);\n  }, [tempMap, dispatch]);\n\n  return (\n    <div className=\"map\">\n      <MapboxMap\n        style=\"mapbox://styles/mapbox/outdoors-v10\" //eslint-disable-line\n        ref={map => {\n          setTempMap(map);\n        }}\n      >\n        {store.position !== undefined && (\n          <Marker coordinates={store.position} anchor=\"bottom\">\n            <div className=\"pin\" />\n            <div className=\"pulse\" />\n          </Marker>\n        )}\n      </MapboxMap>\n    </div>\n  );\n};\n\nexport default Map;\n","import React from 'react';\nimport Geocoder from 'react-geocoder-autocomplete';\n\nimport { useAppValue } from '../../store/AppContext';\nimport { movePosition, getWeather } from '../../store/actions/AppActions';\n\nconst MAPBOX_API_KEY = `${process.env.REACT_APP_MAPBOX_API_KEY}`;\n\nconst GeocoderSearch = () => {\n  const [store, dispatch] = useAppValue();\n\n  const onSelect = ({ center, place_name }) => {\n    movePosition(store, center, place_name)(dispatch);\n    getWeather(center)(dispatch);\n  };\n\n  return (\n    <div className=\"geocoderSearch\">\n      <Geocoder\n        accessToken={MAPBOX_API_KEY}\n        onSelect={onSelect}\n        types=\"place\"\n      />\n    </div>\n  );\n};\n\nexport default GeocoderSearch;\n","import React from 'react';\nimport moment from 'moment';\nimport Skycons from 'react-skycons';\n\nconst DailyWeather = props => {\n  const day = props.weatherInfo;\n  const time = moment.unix(day.time).utc();\n  const dotw = time.format('ddd'); // day of the week\n  const formattedIconString = day.icon.toUpperCase().replace(/-/g, '_');\n\n  return (\n    <div className=\"dailyWeather\">\n      <h2 className=\"dailyWeather__dotw font-heading\">\n        <strong>{props.index === 0 ? 'Today' : dotw}</strong>\n      </h2>\n\n      <div className=\"dailyWeather__icon\">\n        <Skycons icon={formattedIconString} color=\"white\" />\n      </div>\n      <p className=\"dailyWeather__summary\">{day.summary}</p>\n      <p className=\"dailyWeather__low\">\n        {Math.round(day.temperatureLow)} &deg;\n      </p>\n      <p className=\"dailyWeather__high\">\n        {Math.round(day.temperatureHigh)} &deg;\n      </p>\n      <div className=\"dailyWeather__clearFix\" />\n    </div>\n  );\n};\n\nexport default DailyWeather;\n","import React from 'react';\n\nimport { useAppValue } from '../../store/AppContext';\nimport GeocoderSearch from '../atoms/GeocoderSearch';\n\nimport DailyWeather from '../atoms/DailyWeather';\n\nconst Sidebar = props => {\n  const [store] = useAppValue();\n\n  return (\n    <div className=\"sidebar\">\n      <GeocoderSearch />\n      {store.location ? (\n        <React.Fragment>\n          <h1 className=\"sidebar__header font-heading\">\n            7-Day forecast for: <strong>{store.location}</strong>\n          </h1>\n          {store.weather &&\n            store.weather.map((weatherInfo, index) => (\n              <DailyWeather\n                weatherInfo={weatherInfo}\n                key={index}\n                index={index}\n              />\n            ))}\n        </React.Fragment>\n      ) : (\n        <h1 className=\"sidebar__empty\">\n          Search for a city to find out the daily weather\n        </h1>\n      )}\n      <div className=\"footer\">\n        <p>Created by &copy; {new Date().getFullYear()} Brandon Carmody</p>\n        <p>\n          Powered by the{' '}\n          <a\n            href=\"https://darksky.net/dev\"\n            alt=\"Darksky\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            DarkSky Weather API\n          </a>{' '}\n          and the{' '}\n          <a\n            href=\"https://www.mapbox.com/\"\n            alt=\"Mapbox\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Mapbox API\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\n\nimport Map from '../atoms/Map';\nimport Sidebar from '../../components/molecules/Sidebar';\n\nconst Home = () => {\n  return (\n    <React.Fragment>\n      <Map />\n      <Sidebar />\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport { AppProvider } from './store/AppContext';\nimport AppReducer from './store/reducers/AppReducer';\n\nimport Home from './components/pages/Home';\n\n//eslint-disable-next-line\nconst initialState = {};\n\nconst App = () => {\n  return (\n    <AppProvider initialState={initialState} reducer={AppReducer}>\n      <Home />\n    </AppProvider>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}